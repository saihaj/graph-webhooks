name: Build and Dockerize
on:
  workflow_call:
    inputs:
      targets:
        required: true
        type: string
      registry:
        default: ghcr.io
        type: string
      imageName:
        default: ${{ github.repository }}
        type: string
      imageTag:
        required: true
        type: string
      publishPrComment:
        default: true
        type: boolean
      publishLatest:
        required: true
        type: boolean

jobs:
  build-and-dockerize:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    permissions:
      contents: read
      packages: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Configure docker buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Login to docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sanitize branch name
        uses: frabert/replace-string-action@v2.5
        id: branch_name_fix
        with:
          pattern: '[\/@|-]'
          flags: "g"
          string: ${{ github.head_ref || github.ref_name }}
          replace-with: "_"

      - name: Build Base Image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: localhost:5000/connect-monorepo-base/local
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64

      - name: Prepare Bake inputs
        id: docker-bake-inputs
        run: |
          targets=$(docker buildx bake -f docker/docker.hcl --print build | jq -r '.group.build.targets[]')
          input_set=""
          first=0

          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)

          echo "set<<$EOF" >> "$GITHUB_ENV"
          for target in $targets
          do
              echo "$target.cache-from=type=gha,scope=$GITHUB_REF-$target" >> "$GITHUB_ENV"
              echo "$target.cache-to=type=gha,mode=max,scope=$GITHUB_REF-$target" >> "$GITHUB_ENV"
          done
          echo "$EOF" >> "$GITHUB_ENV"

      - name: Downcase image name
        id: downcase_image_name
        run: |
          echo "registry=$(echo "${{ inputs.registry }}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
          echo "imageName=$(echo "${{ inputs.imageName }}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"

      - name: Build docker images
        timeout-minutes: 30
        id: docker-bake
        uses: docker/bake-action@v4
        env:
          DOCKER_REGISTRY: ${{ env.registry }}/${{ env.imageName }}/
          COMMIT_SHA: ${{ inputs.imageTag }}
          RELEASE: ${{ inputs.imageTag }}
          BRANCH_NAME: ${{ steps.branch_name_fix.outputs.replaced }}
          BUILD_TYPE: "publish"
          PWD: ${{ github.workspace }}
          BASE_IMAGE: localhost:5000/graphwebhooks-base/local
          BUILD_STABLE: ${{ inputs.publishLatest && '1' || '' }}
        with:
          # See https://github.com/docker/buildx/issues/1533
          provenance: false
          push: true
          files: docker/docker.hcl
          targets: ${{ inputs.targets }}
          set: |
            ${{ steps.docker-bake-inputs.outputs.set }}

      - name: Docker details PR comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ github.event_name == 'pull_request' && inputs.publishPrComment }}
        with:
          message: |
            üêã This PR was built and pushed to the following [Docker images](https://github.com/connect-financial?ecosystem=container&tab=packages&visibility=public&tab=packages&ecosystem=container&visibility=public&q=connect-financial) (tag: `${{ inputs.imageTag }}`):

            <details>
              <summary>Docker Bake metadata</summary>
              
              ```json
              ${{ steps.docker-bake.outputs.metadata }}
              ```
            </details>
